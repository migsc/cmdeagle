# This is the name of the binary you use to invoke your CLI.

name: "cmdeagle-test"

# Some optional metadata you can add to your CLI. This doesn't get used anywhere but may be useful to document. 
# Displayed by `cmdeagle-test --help` when help command invoked in some other way. 
description: "" # e.g. "My CLI is a tool to manage my projects."
version: "" # e.g.  "0.0.1" 
author: "" # e.g. Your name e.g. "John Doe"
license: "" # e.g. Your license e.g. "MIT"

imports:
- "https://gist.githubusercontent.com/migsc/4aaf770c450e1b2726bf9374ddac5eb0/raw/47f47ce25040f89b891c6c8672ba7e0e4da1086c/example.yaml"
- https://gist.githubusercontent.com/migsc/f5a5c25f0b0acd5da1424f3c7694b7df/raw/b571896c4c4023a5b8a433162a2c7091f6588533/example2.yaml
# When you run `cmdeagle build` without arguments, we'll try to install the binary in these directories
# - For macOs and Linux:   /usr/local/bin or ~/.local/bin
# - For Windows: C:\Users\<username>\AppData\Local\Programs\MyApp\bin

# We also install the bundled files declared by your CLI in these directories
# - For macOS and Linux:   /usr/local/share/mycli or ~/.local/share/mycli
# - Windows (user-only): %LocalAppData%\MyApp

# You can bundle files with your CLI by declaring the paths to them in the `includes` field.
# This is useful for things like static assets, media, configuration files, data files, etc.
# includes:
# - "image.jpg"
# - "sql.db"

# The `requires` statement is used to specify the dependencies your CLI needs to run. These are checked when you run 
# your binary. They are not checked at build time.
# requires:
#   # You need to have Go installed to build with cmdeagle. If you don't have it, you can install it by going to: 
#   # https://go.dev/doc/install
#   go: "*"
# You can use comparison operators preceeding a version number to specify the version of the dependency you need. 
# Here is the full list of operators you can use:
# - `*` (any version)
# - `^` (major version)
# - `~` (major and minor version)
# - `>` (greater than)
# - `<` (less than)
# - `>=` (greater than or equal)
# - `<=` (less than or equal)
# - No operator (exact match)


# "root command" to do something with them. The "root command" refers to the command that is declared in the `start` 
# directive for the entire CLI.



# The subcommands of your CLI. You can nest them as deeply as you want.
commands:

- name: greet
  description: "Greet the user."
  args:
    vars:
    - name: name
      type: string
      description: "Name to greet"
      default: "World"
  flags:
  - name: uppercase
    shorthand: u
    type: boolean
    description: "Convert greeting to uppercase"
  commands:
  - imports:
    - "./cmd/subcommand-1-template.cmd.yaml"
    - "./cmd/subcommand-2-template.cmd.yaml"
