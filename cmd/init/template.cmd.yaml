# This is the name of the binary you use to invoke your CLI.

name: "{{name}}"

# Some optional metadata you can add to your CLI. This doesn't get used anywhere but may be useful to document. 
# Displayed by `{{name}} --help` when help command invoked in some other way. 
description: "{{description}}" # e.g. "My CLI is a tool to manage my projects."
version: "{{version}}" # e.g.  "0.0.1" 
author: "{{author}}" # e.g. Your name e.g. "John Doe"
license: "{{license}}" # e.g. Your license e.g. "MIT"

# Controls whether the CLI will be built with a `completion` subcommand that will
# generate an autocompletion script for you to copy and use in your shell (zsh, bash, etc). 
# This is made possible because cmdeagle uses [cobra](https://github.com/spf13/cobra) 
# under the hood.
completion: true

# This is the build script that will be used to build your CLI.
build: |
  go build -o $CLI_BIN_DIR/{{name}}-go-binary greet.go
  chmod +x $CLI_BIN_DIR/{{name}}-go-binary
# When you run `cmdeagle build` without arguments, It will try to install the binary in these directories
# - For macOs and Linux:   /usr/local/bin or ~/.local/bin
# - For Windows: C:\Users\<username>\AppData\Local\Programs\MyApp\bin
# The build script can also be define on any subcommand level.

# The includes field is used to declare the files that will be bundled with your CLI.
includes:
# You can bundle files with your CLI by declaring the paths to them in the `includes` field.
# This is useful for things like static assets, media, configuration files, data files, etc.
- "./greet.sh"
- "./greet.js"
- "./greet.py"
# When the CLI runs for the first time, it will install the files in these directories
# - For macOS and Linux:   /usr/local/share/{name} or ~/.local/share/{{name}}
# - Windows (user-only): %LocalAppData%\{{name}}


# The subcommands of your CLI. You can nest subcommands as deeply as you want.
# Each subcommand can also declare its own `requires`, `includes` just like the root command above.
commands:

- name: greet
  description: "Greet the user."

  requires:
    # The `requires` statement is used to specify the dependencies your CLI needs to run. These are checked when you run 
    # your binary. They are not checked at build time.
    # You can use comparison operators preceeding a version number to specify the version of the dependency you need. 
    node: ">=16.0.0"
    python3: "*"
    # Here is the full list of operators you can use:
    # - `*` (any version)
    # - `^` (major version)
    # - `~` (major and minor version)
    # - `>` (greater than)
    # - `<` (less than)
    # - `>=` (greater than or equal)
    # - `<=` (less than or equal)
    # - No operator (exact match)

    # The arguments of your CLI.
  args:
    vars:
    - name: name
      type: string
      description: "Name to greet"
      default: "World"
      required: true
    - name: age
      type: number
      description: "Age of the user"
      # constraints: TODO: Fix this
      #   min: 18
      #   max: 100
      depends-on:
      - name: name
    # rules:
    # # Rules apply to all arguments and they follow the same naming conventions as the ones from Cobra
    # - minimum-n-args: 1
    #   maximum-n-args: 2

  flags:

  - name: uppercase
    shorthand: u
    type: boolean
    description: "Convert greeting to uppercase"
    default: false
    conflicts-with:
    - lowercase

  - name: lowercase
    shorthand: u
    type: boolean
    description: "Convert greeting to lowercase"
    default: false
    conflicts-with:
    - uppercase

  - name: repeat
    shorthand: r
    type: number
    description: "Repeat the greeting n times"
    default: 1

  - name: use-python
    shorthand: py
    type: boolean
    description: "Use Python to greet the user"
    conflicts-with:
    - use-javascript

  - name: use-js
    shorthand: js
    type: boolean
    description: "Use JavaScript to greet the user"
    conflicts-with:
    - use-python

  - name: use-go
    shorthand: js
    type: boolean
    description: "Use Go to greet the user"
    conflicts-with:
    - use-python
  # - name: use
  #   type: string
  #   description: "Use the specified language to greet the user"
  #   default: "sh"
  #   constraints:
  #   - in:
  #     - "sh"
  #     - "js"
  #     - "python"
  #     - "go"

  start: |
    if [ "${flags.use-python}" = "true" ]; then
      python3 greet.py
    elif [ "${flags.use-js}" = "true" ]; then
      node greet.js
    elif [ "${flags.use-go}" = "true" ]; then
      ./{{name}}-go-binary
    else
      sh greet.sh
    fi
